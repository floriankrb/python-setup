This describes how I reproduced the cti environment keras_env with my conda, in order to be able to add more packages that CTI has not installed.

All this should be run without changing the default value of LD_LIBRARY_PATH='/usr/local/cuda-9.0/lib64'



## Install conda, update it.

## Create cti-keras-env.yaml
source activate keras_env
conda env export > cti-keras-env.yaml

## Reproduce environment
vim cti-keras-env.yaml # edit and remove keras-contrib
conda env create -n mykeras_env -f cti-keras-env.yaml
conda activate mykeras_env
pip install git+https://www.github.com/farizrahman4u/keras-contrib.git

## CTI Test
   python <<EOF123
import tensorflow as tf
# Creates a graph.
a = tf.constant([1.0, 2.0, 3.0, 4.0, 5.0, 6.0], shape=[2, 3], name='a')
b = tf.constant([1.0, 2.0, 3.0, 4.0, 5.0, 6.0], shape=[3, 2], name='b')
c = tf.matmul(a, b)
# Creates a session with log_device_placement set to True.
sess = tf.Session(config=tf.ConfigProto(log_device_placement=True))
# Runs the op.
print(sess.run(c))
EOF123
   You should see the following output:
Device mapping:
/job:localhost/replica:0/task:0/device:GPU:0 -> device: 0, name: GeForce GTX 1080 Ti, pci bus id: 0000:65:00.0, compute capability: 6.1
MatMul: (MatMul): /job:localhost/replica:0/task:0/device:GPU:0
a: (Const): /job:localhost/replica:0/task:0/device:GPU:0
b: (Const): /job:localhost/replica:0/task:0/device:GPU:0
[[22. 28.]
 [49. 64.]]

## My additional test
python -c 'import keras ; from keras.models import Sequential ; from keras.layers import Dense, Dropout, Activation, Flatten ; from keras.layers import Convolution2D, MaxPooling2D ; from keras.utils import np_utils'
   You should see the following output:
Using TensorFlow backend.
